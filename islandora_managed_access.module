<?php

/**
 * @file
 * The islandora_managed_access moudule.
 */

/**
 * Implements hook_menu().
 */
function islandora_managed_access_menu() {
  $items = array();
  
  $items['admin/islandora/tools/managed_access'] = array(
    'title' => 'Islandora Managed Access',
    'description' => 'Configure Managed Access settings.',
    'access arguments' => array('administer managed access configuration'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/islandora/tools/managed_access/profiles'),
  ); 

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function islandora_managed_access_entity_info() {
  $info = array();

  $info['islandora_managed_access_profile'] = array(
    'label' => t('Managed Access Profile'),
    'base table' => 'islandora_managed_access_profile',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'hname',
    ),
    'entity class' => 'IslandoraManagedAccessProfileEntity',
    'controller class' => 'IslandoraManagedAccessProfileEntityController',
    'admin ui' => array(
      'path' => 'admin/islandora/tools/managed_access/profiles',
      'controller class' => 'IslandoraManagedAccessProfileEntityUIController',
      'file' => 'includes/admin.form.inc',
    ),
    'module' => 'islandora_managed_access',
    'access callback' => 'islandora_managed_access_admin_access_callback',
  );
  $info['islandora_managed_access_object'] = array(
    'label' => t('Managed Access Object'),
    'base table' => 'islandora_managed_access_object',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'pid',
    ),
    'entity class' => 'IslandoraManagedAccessObjectEntity',
    'controller class' => 'IslandoraManagedAccessObjectEntityController',
    'admin ui' => array(
      'path' => 'admin/islandora/tools/managed_access/objects',
      'controller class' => 'IslandoraManagedAccessObjectEntityUIController',
      'file' => 'includes/admin.form.inc',
    ),
    'module' => 'islandora_managed_access',
    'access callback' => 'islandora_managed_access_admin_access_callback',
  );
  $info['islandora_managed_access_user'] = array(
    'label' => t('Managed Access User'),
    'base table' => 'islandora_managed_access_user',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'uid'
    ),
    'entity class' => 'IslandoraManagedAccessUserEntity',
    'controller class' => 'IslandoraManagedAccessUserEntityController',
    'admin ui' => array(
      'path' => 'admin/islandora/tools/managed_access/users',
      'controller class' => 'IslandoraManagedAccessUserEntityUIController',
      'file' => 'includes/admin.form.inc',
    ),
    'module' => 'islandora_managed_access',
    'access callback' => 'islandora_managed_access_admin_access_callback',
  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function islandora_managed_access_permission() {
  return array(
    'administer managed access configuration' => array(
      'title' => t('Administer Managed Access configurations'),
    ),
  );
}

/**
 * Check access permissions for Managed Access configurations.
 */
function islandora_managed_access_admin_access_callback($op, $maentity = NULL, $account = NULL) {
  if (user_access('administer managed access configuration', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Entity class for MA Profiles
 */ 
class IslandoraManagedAccessProfileEntity extends Entity {
}

/**
 * Entity Controller class for MA Profiles
 */
class IslandoraManagedAccessProfileEntityController extends EntityAPIController {

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    if (!isset($entity->id)) { 
      $entity->created_at = time();
    }
    $entity->updated_at = time();
    return parent::save($entity, $transaction);
  }

  public function delete($ids) {
    $profiles = entity_load('islandora_managed_access_profile', $ids);
    foreach ($profiles as $profile) {
      user_role_delete(intval($profile->rid)); 
      db_delete('islandora_managed_access_profile')->condition('id', $profile->id)->execute();
    }
  }

}

/**
 * Entity UI Controller class for MA Profiles
 */
class IslandoraManagedAccessProfileEntityUIController extends EntityDefaultUIController {

  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['type'] = MENU_LOCAL_TASK;
    $items[$this->path]['weight'] = -2;
    return $items;
  }

  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('Name'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }

  public function overviewTable($conditions = array()) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $this->entityType);
    foreach ($conditions as $key => $value) {
      $query->propertyCondition($key, $value);
    }
    if ($this->overviewPagerLimit) {
      $query->pager($this->overviewPagerLimit);
    }
    $results = $query->execute();
    $ids = isset($results[$this->entityType]) ? array_keys($results[$this->entityType]) : array();
    $entities = $ids ? entity_load($this->entityType, $ids) : array();
    ksort($entities);
    $rows = array();
    foreach ($entities as $entity) {
      $additional_cols = array($entity->mname, user_role_load($entity->rid)->name);
      $rows[] = $this->overviewTableRow($conditions, entity_id($this->entityType, $entity), $entity, $additional_cols);
    }

    $additional_headers = array('Machine Name', 'Associated Role');
    $render = array(
      '#theme' => 'table',
      '#header' => $this->overviewTableHeaders($conditions, $rows, $additional_headers),
      '#rows' => $rows,
      '#empty' => t('None.'),
    );
    return $render;
  }
}

/**
 * Entity class for MA Objects
 */
class IslandoraManagedAccessObjectEntity extends Entity {
}

/**
 * Entity Controller class for MA Objects
 */
class IslandoraManagedAccessObjectEntityController extends EntityAPIController {

  // Applies MA Profile policy to single PID
  public static function manageIslandoraObject($pid, $profile_mname) {
    watchdog("ma", "Managing Islandora object $pid");   
    $object = islandora_object_load($pid);
    $object->relationships->add(ISLANDORA_RELS_EXT_URI, 'hasManagedAccessProfile', $profile_mname, RELS_TYPE_PLAIN_LITERAL);
  }

  // Applies MA Profile policy to single PID
  public static function unmanageIslandoraObject($pid) {
    watchdog("ma", "Unmanaging Islandora object $pid");   
    $object = islandora_object_load($pid);
    $object->relationships->remove(ISLANDORA_RELS_EXT_URI, 'hasManagedAccessProfile');
  }

  // Gets all child PIDs of object
  public static function getChildPids($entity) {
    // Run SPARQL query that retrieves <fedora:isConstituentOf rdf:resource="info:fedora/fsu:273671"></fedora:isConstituentOf>
    // for compound objects, or <fedora:isMemberOf rdf:resource="info:fedora/fsu:159278"></fedora:isMemberOf> for newspapers/serials
    // Good example query: https://gist.github.com/jordandukart/4ba9593f7ead5800dd26ffe23a736ee2
    watchdog("ma", "getting child pids");   
    $root_pid = $entity->pid;
    $pids = array();
    // Not currently actually getting child pids
    //$pids = array("fsu:child1", "fsu:child2", "fsu:child3");
    $pids[] = $root_pid;
    return $pids;
  }

  // Removes & reapplies MA Profile policy on Islandora object
  public static function remanageMAObject($entity) {
    self::unmanageMAObject($entity);
    self::manageMAObject($entity);
  }

  // Applies MA Profile policy on Islandora object
  public static function manageMAObject($entity) {
    $children = self::getChildPids($entity);
    $profile = entity_load('islandora_managed_access_profile', array($entity->profile));
    $profile_mname = $profile[$entity->profile]->mname;
    /*
    // This removes the root pid for some reason (because you added it to the list of children?)
    $whitelisted_string = $entity->pid_whitelist;
    $whitelisted_array = explode(",", str_replace(" ", "", $whitelisted_string));
    foreach ($whitelisted_array as $pid) {
      unset($children[array_search($pid, $children)]);
    }
    */
    foreach ($children as $child) {
      self::manageIslandoraObject($child, $profile_mname); 
    }
  }
  
  // Removes MA Profile policy from Islandora object
  public static function unmanageMAObject($entity) {
    $children = self::getChildPids($entity);
    foreach ($children as $child) {
      self::unmanageIslandoraObject($child); 
    }
  }

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    if (!isset($entity->id)) { 
      $entity->created_at = time();
    }
    $entity->updated_at = time();
    self::remanageMAObject($entity);
    return parent::save($entity, $transaction);
  }

  public function delete($ids) {
    $objects = entity_load('islandora_managed_access_object', $ids);
    foreach ($objects as $object) {
      self::unmanageMAObject($object);
      db_delete('islandora_managed_access_object')->condition('id', $object->id)->execute();
    }
  }

}

/**
 * Entity UI Controller class for MA Objects
 */
class IslandoraManagedAccessObjectEntityUIController extends EntityDefaultUIController {

  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['type'] = MENU_LOCAL_TASK;
    $items[$this->path]['weight'] = -1;
    return $items;
  }

  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('PID'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }

  public function overviewTable($conditions = array()) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $this->entityType);
    foreach ($conditions as $key => $value) {
      $query->propertyCondition($key, $value);
    }
    if ($this->overviewPagerLimit) {
      $query->pager($this->overviewPagerLimit);
    }
    $results = $query->execute();
    $ids = isset($results[$this->entityType]) ? array_keys($results[$this->entityType]) : array();
    $entities = $ids ? entity_load($this->entityType, $ids) : array();
    ksort($entities);
    $rows = array();
    foreach ($entities as $entity) {
      $additional_cols = array($entity->profile);
      $rows[] = $this->overviewTableRow($conditions, entity_id($this->entityType, $entity), $entity, $additional_cols);
    }

    $additional_headers = array('Associated Profile');
    $render = array(
      '#theme' => 'table',
      '#header' => $this->overviewTableHeaders($conditions, $rows, $additional_headers),
      '#rows' => $rows,
      '#empty' => t('None.'),
    );
    return $render;
  }
}

/**
 * Entity class for MA Users
 */
class IslandoraManagedAccessUserEntity extends Entity {
}

/**
 * Entity Controller class for MA Users
 */
class IslandoraManagedAccessUserEntityController extends EntityAPIController {

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    if (!isset($entity->id)) { 
      $entity->created_at = time();
    }
    $entity->updated_at = time();
    return parent::save($entity, $transaction);
  }

  public function delete($ids) {
    $users = entity_load('islandora_managed_access_user', $ids);
    foreach ($users as $user) {
      user_delete(intval($user->uid)); 
      db_delete('islandora_managed_access_user')->condition('id', $user->id)->execute();
    }
  }

}

/**
 * Entity UI Controller class for MA Users
 */
class IslandoraManagedAccessUserEntityUIController extends EntityDefaultUIController {

  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['type'] = MENU_LOCAL_TASK;
    $items[$this->path]['weight'] = 0;
    return $items;
  }

  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('UID'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }

  public function overviewTable($conditions = array()) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $this->entityType);
    foreach ($conditions as $key => $value) {
      $query->propertyCondition($key, $value);
    }
    if ($this->overviewPagerLimit) {
      $query->pager($this->overviewPagerLimit);
    }
    $results = $query->execute();
    $ids = isset($results[$this->entityType]) ? array_keys($results[$this->entityType]) : array();
    $entities = $ids ? entity_load($this->entityType, $ids) : array();
    ksort($entities);
    $rows = array();
    foreach ($entities as $entity) {
      $additional_cols = array(user_load($entity->uid)->name, user_load($entity->uid)->mail, $entity->institution, date('M d, Y', $entity->created_at));
      $rows[] = $this->overviewTableRow($conditions, entity_id($this->entityType, $entity), $entity, $additional_cols);
    }

    $additional_headers = array('Name', 'Email', 'Institution', 'Created');
    $render = array(
      '#theme' => 'table',
      '#header' => $this->overviewTableHeaders($conditions, $rows, $additional_headers),
      '#rows' => $rows,
      '#empty' => t('None.'),
    );
    return $render;
  }
}

/**
 * Implements hook_islandora_view_object()
 */

function islandora_managed_access_islandora_view_object($object) {
 watchdog("ma", "Viewing $object->id");
}
